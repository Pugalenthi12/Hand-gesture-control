<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive 3D Object Viewer</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            color: #333;
            overflow: hidden; /* Prevent scrollbars from appearing */
        }
        #container {
            width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            position: relative;
            z-index: 1;
        }
        #controls {
            margin-bottom: 10px;
            display: flex;
            gap: 10px;
            z-index: 2;
        }
        .upload-button, .run-script-button {
            padding: 10px 20px;
            background-color: #0b624e;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
        }
        .upload-button:hover, .run-script-button:hover {
            background-color: #238c6e;
        }
        canvas {
            width: 100%;
            height: 80vh;
            border-radius: 10px;
            background-color: #fff;
            box-shadow: 0 5px 15px rgba(204, 120, 120, 0.3);
        }
        /* Video background styling */
        #background-video {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: -1; /* Ensure the video is behind other elements */
        }
        /* Logo styling */
        #logo {
            position: absolute;
            top: 30px;
            left: 50px;
            width: 150px; /* Adjust the size of the logo */
            z-index: 2; /* Ensure the logo is above other elements */
        }
        /* Hide the "Hand control" button initially */
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <img id="logo" src="C:\Users\PUGALENTHI A\Downloads\Nobl_Q__logo-removebg-preview.png" alt="Company Logo">

    <video id="background-video" autoplay muted loop>
        <source src="D:\Python projects\gesture\video-3 (1).mp4" type="video/mp4">
        Your browser does not support the video tag.
    </video>

    <div id="container">
        <div id="controls">
            <label for="upload-gltf" class="upload-button">Upload GLTF/GLB</label>
            <input type="file" id="upload-gltf" accept=".gltf,.glb" style="display: none;" />
            <button class="run-script-button hidden" id="hand-control-button" onclick="runPythonScript()">Hand control</button>
        </div>
        <canvas id="canvas"></canvas>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        // JavaScript code to handle GLTF/GLB upload and 3D rendering

        function runPythonScript() {
            fetch('http://127.0.0.1:5000/run-script', { method: 'POST' })
                .then(response => response.text())
                .then(data => alert('Python script executed successfully'))
                .catch(error => console.error('Error executing Python script:', error));
        }

        // Scene, Camera, Renderer
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / (window.innerHeight * 0.8), 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: document.getElementById('canvas') });
        renderer.setSize(window.innerWidth, window.innerHeight * 0.8);
        renderer.setPixelRatio(window.devicePixelRatio);

        // Create and set background
        const gradientCanvas = document.createElement('canvas');
        const gradientContext = gradientCanvas.getContext('2d');
        gradientCanvas.width = window.innerWidth;
        gradientCanvas.height = window.innerHeight;
        const gradient = gradientContext.createRadialGradient(
            gradientCanvas.width / 2, gradientCanvas.height / 2, 80,
            gradientCanvas.width / 2, gradientCanvas.height / 2, gradientCanvas.width / 1.4
        );
        gradient.addColorStop(0, 'rgba(35,255,255,1)');
        gradient.addColorStop(1, 'rgba(0,4,0,0)');
        gradientContext.fillStyle = gradient;
        gradientContext.fillRect(0, 0, gradientCanvas.width, gradientCanvas.height);
        const gradientTexture = new THREE.CanvasTexture(gradientCanvas);
        scene.background = gradientTexture;

        // Orbit Controls
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;

        // Lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 4.0);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 4.0);
        pointLight.position.set(0, 0, 10);
        scene.add(pointLight);
        const directionalLight1 = new THREE.DirectionalLight(0xffffff, 5.0);
        directionalLight1.position.set(5, 5, 5);
        scene.add(directionalLight1);
        const directionalLight2 = new THREE.DirectionalLight(0xffffff, 4.5);
        directionalLight2.position.set(-8, -8, -5);
        scene.add(directionalLight2);

        // Function to add extra white lighting around the uploaded object
        function updateLighting() {
            const additionalLight1 = new THREE.PointLight(0xffffff, 1.5, 50);
            additionalLight1.position.set(10, 10, 10);
            scene.add(additionalLight1);

            const additionalLight2 = new THREE.PointLight(0xffffff, 1.5, 50);
            additionalLight2.position.set(-10, -10, -10);
            scene.add(additionalLight2);

            const additionalLight3 = new THREE.DirectionalLight(0xffffff, 2.0);
            additionalLight3.position.set(0, 10, 10).normalize();
            scene.add(additionalLight3);

            // Adjust the position of the camera to ensure proper lighting
            camera.position.set(5, 10, 15);
            controls.update();
        }

        // Loaders
        const gltfLoader = new THREE.GLTFLoader();

        // Handle GLTF/GLB Upload
        document.getElementById('upload-gltf').addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const url = URL.createObjectURL(file);
                gltfLoader.load(url, (gltf) => {
                    scene.add(gltf.scene);
                    updateLighting(); // Add white lighting around the uploaded object
                    URL.revokeObjectURL(url);

                    // Show the "Hand control" button after the file is loaded
                    document.getElementById('hand-control-button').classList.remove('hidden');
                }, undefined, (error) => {
                    console.error('An error occurred while loading the GLTF/GLB file:', error);
                });
            }
        });

        // Render Loop
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }
        animate();

        // Handle Window Resize
        window.addEventListener('resize', () => {
            const width = window.innerWidth;
            const height = window.innerHeight * 0.8;
            renderer.setSize(width, height);
            camera.aspect = width / height;
            camera.updateProjectionMatrix();
        });
    </script>
</body>
</html>
